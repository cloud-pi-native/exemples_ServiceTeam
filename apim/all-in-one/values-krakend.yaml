krakend:
  fullnameOverride: krakend

  imagePullSecrets:
    - name: registry-pull-secret

  global:
    compatibility:
      openshift:
        adaptSecurityContext: "force"

  krakend:
    # -- (bool) Whether the given krakend image to be used contains everything needed
    # for the krakend service to run. If set to false, the image will
    # be used as a base image and the configuration will be loaded from
    # the configmap. Note that the all-in-one image assumes the krakend
    # configuration is located at /etc/krakend-src/config/krakend.tmpl
    allInOneImage: false

    # -- (array) The environment variables to use for the krakend container.
    # The default is just the ones needed to enable flexible configuration.
    # env: []

    # -- (string, optional) If set, this key will contain the full configuration of the krakend service
    # config: ""
    #   {
    #     "disable_rest": true  # Add in config to allow using non-RESTful API paths (ex. '/api/file.css')
    #   }
    config: |-
      {
        "version": 3,
        "endpoints": {{ template "endpoints.tmpl" (.urls) }},
        "extra_config": {{ template "extra_config.tmpl" (.urls) }}
      }

    # -- (string, optional) an external file relative path, will contain the full
    # configuration of the krakend service. useful if config file is generated
    # with flexible config https://www.krakend.io/docs/configuration/flexible-config/
    configFileSource: ""
    # -- (string, optional) an external file relative path, will contain the partial configuration files of the krakend service.
    partialsDirSource: ""
    # -- (string, optional) an external file relative path, will contain the setting configuration files of the krakend service.
    settingsDirSource: ""
    # -- (string, optional) an external file relative path, will contain the template configuration files of the krakend service.
    templatesDirSource: ""

    # -- (Object) The default configuration has a partials files that
    # will be used to load several aspects of the configuration.
    # If you want to include extra partials, add or remove them here.
    partials:
      input_headers.txt: |-
        [
          "Authorization",
          "X-User",
          "X-Role",
          "ClientId",
          "X-Requested-With",
          "Content-Type",
          "Content-Length",
          "Origin"
        ]

    # -- The default configuration has a settings files that
    # will be used to load several aspects of the configuration.
    # settings:
    #   urls.json: |-
    #     {
    #       "APIHost": "http://<BACKEND_SVC_NAME>:<BACKEND_SVC_PORT>",
    #       "JWKUrl": "http://<KEYCLOAK_SVC_NAME>:<KEYCLOAK_SVC_PORT>/realms/<KC_REALM>/protocol/openid-connect/certs"
    #     }

    # -- While default configuration does not take into use
    # templates; you may want to add your own templates here.
    # Note that you'd need to set a custom configuration file
    # to use them.
    templates:
      endpoints.tmpl: |-
        [
          {{ define "auth_validator" }}
          "auth/validator": {
            "alg": "RS256",
            "jwk_url": "{{ .JWKUrl }}",
            "disable_jwk_security": true,
            "roles": {{ .Roles }},
            "roles_key": "realm_access.roles",
            "roles_key_is_nested": true,
            "propagate_claims": [
              ["preferred_username", "x-user"],
              ["realm_access.role", "x-role"]
            ],
            "cache": true,
            "cache_duration": 3600,
            "operation_debug": true
          }
          {{ end }}

          {{ define "lua_proxy" }}
          "modifier/lua-proxy": {
            "pre": "local r = request.load();print('[GATEWAY] Request from username: ' .. r:headers('X-User') .. ' with path: ' .. r:path() .. ' and method: ' .. r:method())",
            "live": false,
            "allow_open_libs": true,
            "skip_next": false
          }
          {{ end }}

          {{ define "ratelimit_router" }}
          "qos/ratelimit/router": {
            "max_rate": "{{ default "10000" .MaxRate }}",
            "client_max_rate": "{{ default "100" .ClientMaxRate }}",
            "every": "{{ default "1m" .Every }}",
            "strategy": "{{ default "header" .Strategy }}",
            "key": "{{ default "Authorization" .Key }}"
          }
          {{ end }}

          {{ define "ratelimit_proxy" }}
          "qos/ratelimit/proxy": {
            "max_rate": "{{ default "500" .MaxRate }}",
            "every": "{{ default "1m" .Every }}"
          }
          {{ end }}

          {{$Host := .APIHost}}
          {{$JWKUrl := .JWKUrl}}

          {
            "endpoint": "/public",
            "backend": [
              {
                "host": ["{{ $host }}"],
                "url_pattern": "/swagger/json",
                "extra_config": {
                  {{ template "ratelimit_proxy" (dict "MaxRate" "100") }}
                }
              }
            ],
            "extra_config": {
              {{ template "ratelimit_router" (dict "Strategy" "ip" "Key" "") }}
            }
          },
          {
            "endpoint": "/private",
            "method": "GET",
            "backend": [
              {
                "host": ["{{ $host }}"],
                "url_pattern": "/api/resource",
                "extra_config": {
                  {{ template "ratelimit_proxy" . }}
                }
              }
            ],
            "input_headers": {{ include "input_header.txt"}},
            "extra_config": {
              {{ template "auth_validator" (dict "JWKUrl" $JWKUrl "Roles" "[\"admin\", \"readwrite\", \"readonly\"]") }},
              {{ template "lua_proxy" . }},
              {{ template "ratelimit_router" . }}
            }
          },
          {
            "endpoint": "/private",
            "method": "POST",
            "backend": [
              {
                "host": ["{{ $host }}"],
                "url_pattern": "/api/resource",
                "extra_config": {
                  {{ template "ratelimit_proxy" . }}
                }
              }
            ],
            "input_headers": {{ include "input_header.txt"}},
            "extra_config": {
              {{ template "auth_validator" (dict "JWKUrl" $JWKUrl "Roles" "[\"admin\", \"readwrite\"]") }},
              {{ template "lua_proxy" . }},
              {{ template "ratelimit_router" . }}
            }
          },
          {
            "endpoint": "/private/search",
            "backend": [
              {
                "host": ["{{ $Host }}"],
                "url_pattern": "/api/resource/search",
                "is_collection": true,
                "extra_config": {
                  {{ template "ratelimit_proxy" . }}
                }
              }
            ],
            "input_headers": {{ include "input_headers.txt" }},
            "input_query_strings": ["*"],
            "extra_config": {
              {{ template "auth_validator" (dict "JWKUrl" $JWKUrl "Roles" "[\"admin\", \"readwrite\", \"readonly\"]") }},
              {{ template "lua_proxy" . }},
              {{ template "ratelimit_router" . }}
            }
          }
        ]
      extra_config.tmpl: |-
        {
          "router": {
            "logger_skip_paths": ["/__health"]
          },
          "auth/jwk-client": {
            "shared_cache_duration": 900
          },
          "telemetry/opentelemetry": {
            "service_name": "krakend_prometheus_service",
            "metric_reporting_period": 1,
            "exporters": {
              "prometheus": [
                {
                  "name": "local_prometheus",
                  "port": 9090,
                  "process_metrics": true,
                  "go_metrics": true
                }
              ]
            }
          },
          "security/cors": {
            "allow_origins": ["{{ .CORSUrl }}"],
            "allow_methods": ["GET", "HEAD", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"],
            "expose_headers": {{ include "input_headers.txt" }},
            "allow_headers": {{ include "input_headers.txt" }},
            "max_age": "12h",
            "allow_credentials": true,
            "debug": false
          }
        }
    
    # -- (object) The service-level "extra_config" settings.
    # This will directly be translated to JSON and is added only
    # if you're not fully overriding the configuration via
    # the `config` setting.
    # For more information, see https://www.krakend.io/docs/enterprise/configuration/
    extraConfig: {}  # Alternative declaration of config params (other than 'endpoints') used if 'config' is empty (default)
      # router:
      #   "@comment": "The health endpoint checks do not show in the logs"
      #   logger_skip_paths:
      #     - "/__health"
      # "telemetry/opentelemetry":
      #   service_name: "krakend_prometheus_service"
      #   metric_reporting_period: 1
      #   exporters:
      #     prometheus:
      #       - name: "local_prometheus"
      #         port: 9090
      #         process_metrics: true
      #         go_metrics: true
      # "auth/jwk-client":
      #   shared_cache_duration: 900
      # "security/cors":
      #   allow_origins: ["<CORSUrl>"]
      #   allow_methods: ["GET", "HEAD", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"]
      #   expose_headers: ["Content-Type", "Content-Length", "Origin"]
      #   allow_headers: ["Authorization", Content-Type", "Content-Length", "Origin"]
      #   max_age: "12h"
      #   allow_credentials: true
      #   debug: false

  securityContext:
    enabled: true
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    runAsUser: null
    runAsGroup: null
    fsGroup: null
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["ALL"]
      add: ["NET_BIND_SERVICE"]

  service:
    externalTrafficPolicy: ""
    type: ClusterIP
    port: 80
    targetPort: 8080
    annotations: {}
    metrics:
      enabled: false
      port: 9100
      targetPort: 9100

  resources:
    requests:
      cpu: 250m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi

  extraVolumeMounts: []
  extraVolumes: []

  serviceMonitor:
    enabled: true
    annotations: {}
    interval: 10s
    scrapeTimeout: 10s
    targetPort: 9091

  ingress:
    # enabled: true
    className: ""
    annotations: {}
    # hosts:
    #   - host: ""
    #     paths:
    #       - path: /
    #         pathType: Prefix
    # tls:
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
