krakend:
  imagePullSecrets:
    - name: registry-pull-secret

  global:
    compatibility:
      openshift:
        adaptSecurityContext: "force"

  krakend:
    # -- (bool) Whether the given krakend image to be used contains everything needed
    # for the krakend service to run. If set to false, the image will
    # be used as a base image and the configuration will be loaded from
    # the configmap. Note that the all-in-one image assumes the krakend
    # configuration is located at /etc/krakend-src/config/krakend.tmpl
    allInOneImage: false
    # -- (array) The environment variables to use for the krakend container.
    # The default is just the ones needed to enable flexible configuration.
    env: []
    # -- (string, optional) If set, this key will contain the full configuration of the krakend service
    config: ""
    # config: |-
    #   {
    #     "version": 3,
    #     "extra_config": {
    #       {{ template "telemetry.tmpl" . }}
    #     },
    #     "endpoints": [
    #       {{ template "endpoints.tmpl" (merge .urls .token) }}
    #     ]
    #   }
    # -- (string, optional) an external file relative path, will contain the full
    # configuration of the krakend service. useful if config file is generated
    # with flexible config https://www.krakend.io/docs/configuration/flexible-config/
    configFileSource: ""

    # -- (string, optional) an external file relative path, will contain the partial configuration files of the krakend service.
    partialsDirSource: ""
    # -- (string, optional) an external file relative path, will contain the setting configuration files of the krakend service.
    settingsDirSource: ""
    # -- (string, optional) an external file relative path, will contain the template configuration files of the krakend service.
    templatesDirSource: ""
    # -- (Object) The default configuration has a partials files that
    # will be used to load several aspects of the configuration.
    # If you want to include extra partials, add or remove them here.
    partials:
      input_header.txt: |-
        [
          "Authorization",
          "X-User",
          "X-Role",
          "Content-Type",
          "ClientId"
        ]
    # -- The default configuration has a settings files that
    # will be used to load several aspects of the configuration.
    settings:
      urls.json: |-
        {
          "APIHost": "http://$(BACKEND_SVC_NAME):3500",
          "JWKUrl": "http://$(KEYCLOAK_SVC_NAME):80/realms/$(KC_REALM)/protocol/openid-connect/certs"
        }
      # {
      #   "APIHost": "http://mi-refapp-dev-back-infra-6293:3500",
      #   "JWKUrl": "http://mi-refapp-dev-sso-kc-infra-6293-keycloak:80/realms/krakend-realm/protocol/openid-connect/certs"
      # }
    # -- While default configuration does not take into use
    # templates; you may want to add your own templates here.
    # Note that you'd need to set a custom configuration file
    # to use them.
    templates:
      endpoints.tmpl: |-
        {{ define "auth_validator" }}
        {
          "alg": "RS256",
          "jwk_url": "{{ .JWKUrl }}",
          "disable_jwk_security": true,
          "roles": {{ .Roles }},
          "roles_key": "realm_access.roles",
          "roles_key_is_nested": true,
          "propagate_claims": [
            ["preferred_username", "x-user"],
            ["realm_access.role", "x-role"]
          ],
          "cache": true,
          "cache_duration": 3600,
          "operation_debug": true
        }
        {{ end }}
        {{ define "auth_jwk_client" }}
        {
          "shared_cache_duration": 900
        }
        {{ end }}
        {{ define "lua_prescript" }}
        {
          "pre": "local r = request.load();print('[GATEWAY] Request from username: ' .. r:headers('X-User') .. ' with path: ' .. r:path() .. ' and method: ' .. r:method())",
          "live": false,
          "allow_open_libs": true,
          "skip_next": false
        }
        {{ end }}
        {{$host := .APIHost}}
        {{$JWKUrl := .JWKUrl}}
        {
          "endpoint": "/api/public",
          "method": "GET",
          "backend": [
            {
              "host": ["{{ $host }}"],
              "url_pattern": "/swagger/json"
            }
          ]
        },
        {
          "endpoint": "/api/private1",
          "method": "GET",
          "backend": [
            {
              "host": ["{{ $host }}"],
              "url_pattern": "/api/resource1"
            }
          ],
          "input_headers": {{ include "input_header.txt"}},
          "extra_config": {
            "auth/validator": {{ template "auth_validator" (dict "JWKUrl" $JWKUrl "Roles" "[\"admin\", \"readwrite\", \"readonly\"]") }},
            "auth/jwk-client": {{ template "auth_jwk_client" . }},
            "modifier/lua-proxy": {{ template "lua_prescript" . }}
          }
        },
        {
          "endpoint": "/api/private1",
          "method": "POST",
          "backend": [
            {
              "host": ["{{ $host }}"],
              "url_pattern": "/api/resource1"
            }
          ],
          "input_headers": {{ include "input_header.txt"}},
          "extra_config": {
            "auth/validator": {{ template "auth_validator" (dict "JWKUrl" $JWKUrl "Roles" "[\"admin\", \"readwrite\"]") }},
            "auth/jwk-client": {{ template "auth_jwk_client" . }},
            "modifier/lua-proxy": {{ template "lua_prescript" . }}
          }
        }
      # telemetry.tmpl: |-
      #   "telemetry/opentelemetry": {
      #     "service_name": "krakend_prometheus_service",
      #     "metric_reporting_period": 1,
      #     "exporters": {
      #       "prometheus": [
      #         {
      #           "name": "local_prometheus",
      #           "port": 9090,
      #           "process_metrics": true,
      #           "go_metrics": true
      #         }
      #       ]
      #     }
      #   }
    # -- (object) The service-level "extra_config" settings.
    # This will directly be translated to JSON and is added only
    # if you're not fully overriding the configuration via
    # the `config` setting.
    # For more information, see https://www.krakend.io/docs/enterprise/configuration/
    extraConfig:
      router:
        "@comment": "The health endpoint checks do not show in the logs"
        logger_skip_paths:
          - "/__health"
      "telemetry/opentelemetry":
        service_name: "krakend_prometheus_service"
        metric_reporting_period: 1
        exporters:
          prometheus:
            - name: "local_prometheus"
              port: 9090
              process_metrics: true
              go_metrics: true

  securityContext:
    enabled: true
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    runAsUser: null
    runAsGroup: null
    fsGroup: null
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["ALL"]
      add: ["NET_BIND_SERVICE"]

  service:
    # -- (string) The External Traffic Policy of the service
    externalTrafficPolicy: ""
    # -- (string) The type of service to use
    type: ClusterIP
    # -- (int) The port to use for the service
    port: 80
    # -- (int) The target port to use for the service
    targetPort: 8080
    # -- (object) The annotations to use for the service
    annotations: {}
    # -- (object) The service settings to reach the metrics port
    metrics:
      # -- (bool) Specifies whether the metrics port is reachable
      enabled: false
      # -- (int) The port to use for the metrics service
      port: 9100
      # -- (int) The target port to use for the metrics service
      targetPort: 9100

  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 1024Mi

  extraVolumeMounts: []
  extraVolumes: []

  serviceMonitor:
    # -- (bool) Set to true to create a default ServiceMonitor for your application
    enabled: true
    # -- Annotations to add to ServiceMonitor
    annotations: {}
    # -- Interval for scrape metrics.
    interval: 10s
    # -- time out interval when scraping metrics
    scrapeTimeout: 10s
    # -- prometheus metrics port exposed by krakend
    targetPort: 9091

  ingress:
    # enabled: true
    className: ""
    annotations: {}
    # hosts:
    #   - host: ""
    #     paths:
    #       - path: /
    #         pathType: Prefix
    # tls:
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
